syntax = "proto3";

package solver.v1;

service Solver{
  // streams the data in response
  rpc Solve(SolverSolveRequest) returns  (stream SolverSolveResponse) {}
  rpc SolveStepByStep(SolverSolveRequest) returns  (stream SolverStepByStepResponse) {}
}


message SolverSolveRequest {
  repeated Piece pieces = 1;
  uint32 threads = 2;
  uint32 hash_threshold = 3;
  uint32 wait_time = 4;
  bool use_cache = 5;
  uint32 cache_pull_interval = 6;
}

message Piece {
  uint32 top = 1;
  uint32 right = 2;
  uint32 bottom = 3;
  uint32 left = 4;
}

message PieceWithOptionalHint {
  Piece piece = 1;
  optional int32 x = 2;
  optional int32 y = 3;
}

message RotatedPiece {
  Piece piece = 1;
  uint32 rotation = 2;
  uint32 index = 3;
}

message SolverStepByStepResponse {
  repeated RotatedPiece rotated_pieces = 1 ;
}

message SolverSolveResponse {
  double time = 1;
  double hashes_per_second = 2;
  uint32 hash_table_size = 3;
  double boards_per_second = 4;
  uint32 boards_analyzed = 5;
  uint32 hash_table_hits = 6;
  repeated RotatedPiece rotated_pieces = 7;
}